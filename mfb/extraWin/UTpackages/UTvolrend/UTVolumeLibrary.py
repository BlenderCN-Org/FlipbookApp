# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_UTVolumeLibrary', [dirname(__file__)])
        except ImportError:
            import _UTVolumeLibrary
            return _UTVolumeLibrary
        if fp is not None:
            try:
                _mod = imp.load_module('_UTVolumeLibrary', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _UTVolumeLibrary = swig_import_helper()
    del swig_import_helper
else:
    import _UTVolumeLibrary
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class VolumeRenderer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VolumeRenderer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VolumeRenderer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _UTVolumeLibrary.new_VolumeRenderer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _UTVolumeLibrary.delete_VolumeRenderer
    __del__ = lambda self : None;
    def initRenderer(self) -> "bool" : return _UTVolumeLibrary.VolumeRenderer_initRenderer(self)
    def setAspectRatio(self, *args) -> "bool" : return _UTVolumeLibrary.VolumeRenderer_setAspectRatio(self, *args)
    def setTextureSubCube(self, *args) -> "bool" : return _UTVolumeLibrary.VolumeRenderer_setTextureSubCube(self, *args)
    def setQuality(self, *args) -> "bool" : return _UTVolumeLibrary.VolumeRenderer_setQuality(self, *args)
    def getQuality(self) -> "double" : return _UTVolumeLibrary.VolumeRenderer_getQuality(self)
    def setNearPlane(self, *args) -> "bool" : return _UTVolumeLibrary.VolumeRenderer_setNearPlane(self, *args)
    def getNearPlane(self) -> "double" : return _UTVolumeLibrary.VolumeRenderer_getNearPlane(self)
    def isShadedRenderingAvailable(self) -> "bool" : return _UTVolumeLibrary.VolumeRenderer_isShadedRenderingAvailable(self)
    def enableShadedRendering(self) -> "bool" : return _UTVolumeLibrary.VolumeRenderer_enableShadedRendering(self)
    def disableShadedRendering(self) -> "bool" : return _UTVolumeLibrary.VolumeRenderer_disableShadedRendering(self)
    def uploadColorMappedData(self, *args) -> "bool" : return _UTVolumeLibrary.VolumeRenderer_uploadColorMappedData(self, *args)
    def uploadColorMappedDataWithBorder(self, *args) -> "bool" : return _UTVolumeLibrary.VolumeRenderer_uploadColorMappedDataWithBorder(self, *args)
    def testColorMappedData(self, *args) -> "bool" : return _UTVolumeLibrary.VolumeRenderer_testColorMappedData(self, *args)
    def testColorMappedDataWithBorder(self, *args) -> "bool" : return _UTVolumeLibrary.VolumeRenderer_testColorMappedDataWithBorder(self, *args)
    def uploadRGBAData(self, *args) -> "bool" : return _UTVolumeLibrary.VolumeRenderer_uploadRGBAData(self, *args)
    def uploadGradients(self, *args) -> "bool" : return _UTVolumeLibrary.VolumeRenderer_uploadGradients(self, *args)
    def calculateGradientsFromDensities(self, *args) -> "bool" : return _UTVolumeLibrary.VolumeRenderer_calculateGradientsFromDensities(self, *args)
    def uploadColorMap(self, *args) -> "bool" : return _UTVolumeLibrary.VolumeRenderer_uploadColorMap(self, *args)
    def getNumberOfPlanesRendered(self) -> "int" : return _UTVolumeLibrary.VolumeRenderer_getNumberOfPlanesRendered(self)
    def renderVolume(self) -> "bool" : return _UTVolumeLibrary.VolumeRenderer_renderVolume(self)
    def uploadZeroPaddedData(self, *args) -> "bool" : return _UTVolumeLibrary.VolumeRenderer_uploadZeroPaddedData(self, *args)
VolumeRenderer_swigregister = _UTVolumeLibrary.VolumeRenderer_swigregister
VolumeRenderer_swigregister(VolumeRenderer)


def InitTexParameteri() -> "void" :
  return _UTVolumeLibrary.InitTexParameteri()
InitTexParameteri = _UTVolumeLibrary.InitTexParameteri

def QueryExtension(*args) -> "bool" :
  return _UTVolumeLibrary.QueryExtension(*args)
QueryExtension = _UTVolumeLibrary.QueryExtension
# This file is compatible with both classic and new-style classes.

createNumArr = _UTVolumeLibrary.createNumArr

